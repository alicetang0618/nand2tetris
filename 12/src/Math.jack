// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns true if the j-th bit of the integer x is 1 and false otherwise. */
    function int bit(int x, int j){
        return ~((x & twoToThe[j]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;
        if (x < 0) {
            return -Math.multiply(-x, y);
        }
        if (y < 0) {
            return -Math.multiply(x, -y);
        }
        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while (j < 16) {
            if (Math.bit(y, j) = -1){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int q;
        if (x < 0) {
            return -Math.divide(-x, y);
        }
        if (y < 0) {
            return -Math.divide(x, -y);
        }
        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, (2*y));
        if ((x - (2*q*y)) < y){
            return (2*q);
        } else {
            return (2*q + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, cond;
        let y = 0;
        let j = 7;
        while (~(j < 0)) {
            let cond = (y + twoToThe[j]) * (y + twoToThe[j]);
            if (~(cond > x) & (cond > 0)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (b < a) {
            return b;
        } else {
            return a;
        }
    }
}
