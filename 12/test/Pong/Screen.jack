// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        // initialize the twoToThe array
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }
        // initialize color
        let color = true;

        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int address;

        let address = 16384;
        while (address < 16384 + 8192) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }

        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int address, bit, val;

        // throw an error for illegal address
        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(7);
        }
        let address = 16384 + (y*32) + (x/16);
        let bit = x - ((x/16)*16);
        if (color) {
            let val = Memory.peek(address) | twoToThe[bit];
        } else {
            let val = Memory.peek(address) & (~twoToThe[bit]);
        }
        do Memory.poke(address, val);

        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, adyMinusbdx, tmp, dy;

        // check x1 <= x2
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        // consider the case of y1 == y2
        if (y1 = y2) {
            while (~((x1+a)>x2)) {
                do Screen.drawPixel(x1+a, y1);
                let a = a + 1;
            }
        } else {
            if (y1 < y2) {
                let dy = y2 - y1;
            } else {
                let dy = y1 - y2;
            }
            while ((~(a>(x2-x1))) & (~(b>dy))) {
                if (y1 < y2){
                    do Screen.drawPixel(x1+a, y1+b);
                } else {
                    do Screen.drawPixel(x1+a, y1-b);
                }
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - x2 + x1;
                }
            }
        }
        
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;

        // throw an error for illegal coordinates
        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255) | (x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255) | (x1 > x2) | (y1 > y2)) {
            do Sys.error(8);
        }

        let y = y1;

        while (~(y > y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int y, xLen;

        // throw an error for illegal coordinate or radius
        if ((cx < 0) | (cx > 511) | (cy < 0) | (cy > 255) | (r < 0) | (cx-r < 0) | (cx+r > 511) | (cy-r < 0) | (cy+r > 255)) {
            do Sys.error(9);
        }

        let y = cy - r;

        while (y < (cy + r)) {
            let xLen = Math.sqrt((r*r) - ((y-cy)*(y-cy)));
            do Screen.drawLine((cx-xLen), y, (cx+xLen), y);
            let y = y + 1;
        }

        return;
    }
}
