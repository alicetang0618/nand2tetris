// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // group the registers by the last 2 bits of address, assign separate load values for each of the 4 groups
    DMux4Way(in=load, sel=address[12..13], a=loada, b=loadb, c=loadc, d=loadd);

    // for each RAM4K, if load equals 1, locate the register that gets loaded using the first 12 bits of address
    RAM4K(in=in, load=loada, address=address[0..11], out=outa);
    RAM4K(in=in, load=loadb, address=address[0..11], out=outb);
    RAM4K(in=in, load=loadc, address=address[0..11], out=outc);
    RAM4K(in=in, load=loadd, address=address[0..11], out=outd);

    // assign the value stored at the address to out
    Mux4Way16(a=outa, b=outb, c=outc, d=outd, sel=address[12..13], out=out);
}